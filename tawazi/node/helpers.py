"""Helpers for node subpackage."""

from typing import Dict, List, Tuple, Union

from tawazi.consts import ReturnTypeErrString
from tawazi.errors import TawaziTypeError

from .node import UsageExecNode

ReturnUXNsType = Union[
    None, UsageExecNode, Tuple[UsageExecNode], List[UsageExecNode], Dict[str, UsageExecNode]
]


def _is_list_or_tuple(returned_uxns: ReturnUXNsType) -> bool:
    if isinstance(returned_uxns, (tuple, list)):
        # 3.1 Collect all the return ids
        for ren in returned_uxns:
            if not isinstance(ren, UsageExecNode):
                # NOTE: this error shouldn't ever raise during usage.
                # Please report in https://github.com/mindee/tawazi/issues
                raise TawaziTypeError(f"{ReturnTypeErrString}. provided {ren}")
        return True
    return False


def _is_dict(returned_uxns: ReturnUXNsType) -> bool:
    if isinstance(returned_uxns, dict):
        for ren in returned_uxns.values():
            # 4.1 key should be str and value should be an ExecNode generated by running an xnode...
            if not isinstance(ren, UsageExecNode):
                raise TawaziTypeError(
                    f"return dict should only contain ExecNodes, but {ren} is of type {type(ren)}"
                )
        return True
    return False


def validate_returned_usage_exec_nodes(returned_uxns: ReturnUXNsType) -> None:
    """Get the IDs of the returned UsageExecNodes.

    Args:
        returned_uxns (ReturnXNsType): Aliases of the returned UsageExecNodes

    Raises:
        TawaziTypeError: _description_
        TawaziTypeError: _description_

    Returns:
        ReturnIDsType: Corresponding IDs of the returned UsageExecNodes
    """
    # TODO: support iterators etc.

    # 1 No value returned by the execution
    no_val = returned_uxns is None
    # 2 a single value is returned
    single_val = isinstance(returned_uxns, UsageExecNode)
    # 3 multiple values returned
    tuple_or_list_val = _is_list_or_tuple(returned_uxns)
    # 4 support dict
    dict_val = _is_dict(returned_uxns)
    if no_val or single_val or tuple_or_list_val or dict_val:
        return
    raise TawaziTypeError(
        f"{ReturnTypeErrString}. Type of the provided return: {type(returned_uxns)}"
    )
